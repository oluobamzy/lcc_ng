import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { MediaItem, MediaType } from '../components/Gallery/types';
import { Gallery } from '../components/Gallery/Gallery';
import { Search, Filter, SortDesc, Loader } from 'lucide-react';
import { ref as storageRef, listAll, getDownloadURL } from 'firebase/storage';
import { storage } from '../lib/firebase';

// Animation variants
const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { duration: 0.6 }
  }
};

// Sample media data - in a production app, this would come from Firebase
const sampleMedia: MediaItem[] = [
  {
    id: '1',
    type: 'image',
    url: 'https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&q=80&w=800',
    title: 'Sunday Service',
    description: 'Worship together as a community'
  },
  {
    id: '2',
    type: 'video',
    url: 'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/720/Big_Buck_Bunny_720_10s_1MB.mp4',
    thumbnail: 'https://images.unsplash.com/photo-1516280440614-37939bbacd81?auto=format&fit=crop&q=80&w=800',
    title: 'Latest Sermon',
    description: 'Finding Peace in Troubled Times'
  },
  {
    id: '3',
    type: 'image',
    url: 'https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&q=80&w=800',
    title: 'Youth Conference',
    description: 'Building the next generation of leaders'
  },
  {
    id: '4',
    type: 'image',
    url: 'https://images.unsplash.com/photo-1508252592163-5d3c3c559387?auto=format&fit=crop&q=80&w=800',
    title: 'Community Outreach',
    description: 'Serving our local community'
  },
  {
    id: '5',
    type: 'video',
    url: 'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/720/Big_Buck_Bunny_720_10s_1MB.mp4',
    thumbnail: 'https://images.unsplash.com/photo-1515089836238-772a92501177?auto=format&fit=crop&q=80&w=800',
    title: 'Bible Study Series',
    description: 'Exploring the Gospel of John'
  },
  {
    id: '6',
    type: 'image',
    url: 'https://images.unsplash.com/photo-1445633629932-0029acc44e88?auto=format&fit=crop&q=80&w=800',
    title: 'Worship Night',
    description: 'An evening of praise and worship'
  }
];

export function MediaPage() {
  const { ref, inView } = useInView({ threshold: 0.1, triggerOnce: true });
  const [media, setMedia] = useState<MediaItem[]>([...sampleMedia]);
  const [searchTerm, setSearchTerm] = useState('');
  const [category, setCategory] = useState('all');
  const [isLoading, setIsLoading] = useState(false);
  
  // Fetch media from Firebase
  const fetchFirebaseMedia = async () => {
    try {
      setIsLoading(true);
      const mediaRef = storageRef(storage, 'media');
      const result = await listAll(mediaRef);
      
      const filePromises = result.items.map(async (item) => {
        const url = await getDownloadURL(item);
        let mediaType: MediaType = 'image'; // Default to image
        let thumbnail = url;
        
        // Try to determine file type from name
        if (item.name.toLowerCase().match(/\.(mp4|mov|avi|wmv)$/)) {
          mediaType = 'video';
        }
        
        // For videos, we would ideally generate a thumbnail
        if (mediaType === 'video') {
          // Using a placeholder thumbnail for now
          thumbnail = 'https://images.unsplash.com/photo-1516280440614-37939bbacd81?auto=format&fit=crop&q=80&w=800';
        }
        
        return {
          id: item.name,
          type: mediaType,
          url,
          thumbnail: mediaType === 'video' ? thumbnail : url,
          title: item.name.split('.')[0].replace(/-/g, ' '),
          description: `Uploaded media file: ${item.name}`
        };
      });

      const fileList = await Promise.all(filePromises);
      
      // Combine sample media with Firebase media for demo purposes
      // In production, you'd likely only use Firebase media
      setMedia([...sampleMedia, ...fileList]);
    } catch (error) {
      console.error('Error fetching Firebase media:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  useEffect(() => {
    fetchFirebaseMedia();
  }, []);
  
  // Filter media by search term and category
  const filteredMedia = media.filter((item) => {
    // Filter by search term
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()));
    
    // Filter by category
    const matchesCategory = category === 'all' || item.type === category;
    
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header Section */}
      <div 
        className="flex flex-col md:flex-row justify-between items-center mb-12"
        ref={ref}
      >
        <motion.div 
          className="mb-6 md:mb-0"
          variants={fadeIn}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
        >
          <h1 className="text-4xl font-bold text-[#006297]">Media Library</h1>
          <p className="text-gray-600 mt-2">Explore messages, photos, and videos from our church</p>
        </motion.div>
        
        {/* Search */}
        <motion.div
          className="w-full md:w-auto"
          variants={fadeIn}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          transition={{ delay: 0.1 }}
        >
          <div className="relative">
            <input
              type="text"
              placeholder="Search media..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full md:w-80 pl-10 pr-4 py-2 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#006297]"
            />
            <Search className="absolute left-3 top-2.5 text-gray-400 w-5 h-5" />
          </div>
        </motion.div>
      </div>
      
      {/* Filter Options */}
      <motion.div 
        className="flex flex-wrap gap-4 mb-8"
        variants={fadeIn}
        initial="hidden"
        animate={inView ? "visible" : "hidden"}
        transition={{ delay: 0.2 }}
      >
        <div className="flex items-center">
          <Filter className="text-[#006297] w-5 h-5 mr-2" />
          <span className="text-sm font-medium text-gray-700">Filter:</span>
        </div>
        
        <button 
          className={`px-4 py-1 rounded-full text-sm ${category === 'all' ? 'bg-[#006297] text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
          onClick={() => setCategory('all')}
        >
          All
        </button>
        <button 
          className={`px-4 py-1 rounded-full text-sm ${category === 'image' ? 'bg-[#006297] text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
          onClick={() => setCategory('image')}
        >
          Photos
        </button>
        <button 
          className={`px-4 py-1 rounded-full text-sm ${category === 'video' ? 'bg-[#006297] text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
          onClick={() => setCategory('video')}
        >
          Videos
        </button>
      </motion.div>
      
      {/* Loading Indicator */}
      {isLoading && (
        <div className="flex justify-center items-center py-8">
          <Loader className="animate-spin text-[#006297] w-8 h-8" />
          <span className="ml-2 text-gray-600">Loading media...</span>
        </div>
      )}
      
      {/* Gallery Section */}
      {!isLoading && (
        <motion.div
          variants={fadeIn}
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          transition={{ delay: 0.3 }}
        >
          {filteredMedia.length > 0 ? (
            <Gallery items={filteredMedia} columns={3} />
          ) : (
            <div className="text-center py-16">
              <p className="text-xl text-gray-600">No media found matching your search</p>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
}
